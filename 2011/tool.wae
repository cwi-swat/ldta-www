module tool
import rightsidebar
import leftsidebar

site
 tool.html: main
end

def css(url, media)
  link(rel="stylesheet", href=url, type="text/css", media=media);
end

def content
  tools();
end


def temporaryContent
 p "11th International Workshop on Language Descriptions, Tools, 
    and Applications" ;
 p "Saarbr&uuml;cken, Germany; March 26 & 27, 2011; an ETAPS workshop" ;
end


def tools
 section("Tool Challenge Description and Problem Set") { 

p "
The LDTA 2011 Tool Challenge is a community-building exercise to get
tool developers working on the same problem, but with different tools
and techniques.  The goal is to create a discussion that fosters a
better understanding, among tool developers and tool users, of
relative strengths and weaknesses of different language processing
tools, techniques, and formalisms.     
" ;

h2 "LDTA 2011 Tool Challenge Problem Set";

p "
The LDTA 2011 Tool Challenge Problem Set is a collection of language
processing tasks to be applied to a simple, but evolving, collection
of related imperative programming languages.  The individual problems
in the Problem Set can be viewed as points in a two dimensional space:
the first dimension specifying language processing tasks and the
second dimension indicating the languages to which these tasks are to
be applied.  The task dimension consists of several traditional
language processing tasks such as parsing, pretty printing, semantic
analysis, optimization, and code generation. The language dimension
consists of a sequence of evolving imperative programming
languages.  These are all variations on Oberon0 (a small derivative of
Pascal, Modula-2, and Oberon) used as an example language in Nicolas
Wirth's book &quot;Compiler Construction&quot; (see URL below).
" ;

p "
Note that not all aspects of most of the problems are fully and
precisely defined; this is intentional.  The purpose of the tools
challenge to better understand how various tools, techniques, and
formalisms can be applied to a variety of language processing tasks
and this can be accomplished even if some variation to the problems
exists.
" ;

p "
Furthermore, tool developers should not feel that they must complete
all of, or even a majority of, the tasks for all of the languages in
order to participate in the challenge or to present their results at
the workshop.  Participants should look to demonstrate the unique
qualities of their tool or technique and if this can be done on a
subset of the tasks for the simple core languages then that is also
encouraged.  Thus, participants may attempt to fill in all points in
the 2 dimensional problem space or focus on those that they find most
interesting and applicable to their tools and techniques. 
";

h2 "Task Dimension";

p "
The tasks to be completed for the various languages are all
traditional compiler tasks for imperative programming languages.
These are discussed in most compiler construction texts, including
Wirth's, and have been used in other problem sets such as the TIL
Chairmarks created by James Cordy and Eelco Visser.  
" ;

h3 "T1. Parsing and Pretty Printing.";
p "
Build a tool that reads in programs, constructs a parse tree
(implicitly or explicitly), and then pretty-prints the parse tree.
" ;

h3 "T2. Name binding.";
p "
Build a tool that reads in syntactically valid programs and binds all
name uses to their declarations.  If some names are not declared or
declared more than once an appropriate error message should be
displayed.
" ;

h3 "T3. Type checking.";
p "
Check that no type errors occur in the program; if any do, display
appropriate error messages.  Solutions should aim at providing
informative, helpful error messages at an appropriate abstraction
level.
" ;

h3 "T4. Source-to-source transformations.";
p "
There are two source-to-source transformation tasks:
" ;

p "
T4.a. The first asks to what extent can language features introduced
in extended versions of the language be seen as extensions that can be
&quot;de-sugared&quot; or reduced to language constructs in a previously 
implemented version of the object language?  For example, how can
control flow constructs introduced in language L2 (see below) be
transformed into other constructs already implemented in L1.
" ;

p "
T4.b. The second task is to apply a number of traditional
optimizations.  These are constant propagation, dead code elimination,
common sub-expression elimination, and strength reduction.
" ;

h3 "T5. Code generation.";
p "
There are two code generation tasks:
" ;
p "
T5.a. The first is to translate Oberon0 to ANSI C; this should be
straightforward as Oberon0 and C share many constructs.
" ;
p "
T5.b. The second task is to translate to a lower-level language:
Wirth's DLX, a simple RISC assembly language also described in his
text.  Participants may, alternatively, apply the optimizations in
task T4.b to the generated DLX code.
";


h2 "Language dimension";

p {
echo "
The object languages to be implemented in this challenge are all based
on Oberon0.  This language is defined in " ;
a (href="http://www-old.oberon.ethz.ch/WirthPubl/CBEAll.pdf")
"Nicolas Wirth's textbook Compiler Construction" ;
echo ".
Chapter 6 (p. 30-31) defines the basic syntax of Oberon0 and
subsequent chapters describe its semantics.
" ;
}

p "
We define a series of languages, in most cases, each building on the
previous one:
" ;

ul {
li " 
L1: Oberon0 without procedures and with only primitive types (no
arrays or records).
" ;

li "
L2: created by adding additional control structures to L1.  Add a
Pascal-style for-loop and a Pascal-style case statement.
" ;

li "
L3: created by adding Oberon0 procedures to L2." ;

li "
L4: created by adding Oberon0 arrays and records to L3." ;

li "

L5: created by adding a participant-defined notion of pointers to L4.
This requires a new type expression as well as operators to take an
address and to de-reference a pointer.  The precise syntax of these
can be based on Oberon, Pascal, C, or otherwise defined by the
participant.
" ; 
}


h2 "Choosing problems to solve";

p "
The task dimension specifies 5 tasks and the language dimension
specifies 5 languages, but participants are not expected to complete
25 different software artifacts to solve each of these 25 problems.
The languages are organized such that each is a subset, in terms of
syntactic constructs, of the next language in the sequence. Thus, in
many cases, a software artifact generated to solve a specific task for
language L4 is also a solution for that task on languages L1, L2, and
L3.
" ;

p "
Furthermore, as stated above, participants need not solve all
problems; they should choose problems in the grid that best exemplify
the characteristics and features of their tool or technique.
" ;

p "
By specifying simple languages such as L1 and L2 we aim to provide an
easy path to participation in the tool challenge.  While we hope that
participants will provide task solutions to the more complex languages
they should not feel that they need to solve all the tasks on all the
languages in order to participate. 
" ;

p "
Another reason for specifying the object languages as a sequence of
extended languages is to give participants the opportunity to show how
language/task solutions can be developed in a modular manner in which
extensions are added to an existing language/task solution to create
another.  
" ;

p "
To enable some compatibility of software artifacts from the
participants and to foster the sharing of sample programs and test
cases, we provide the following list of suggested software artifacts
to be completed:
";
ul {
  li "Artifact 1: Task T1 on language L3." ;
  li "Artifact 2: Task T1 on language L4." ;
  li "Artifact 3: Task T2 and T3 on language L3 or L4." ;
  li "Artifact 4: Task T4 on language L3 or L4." ;
  li "Artifact 5: Task T5 on language L3 or L4." ;
}





//-------------------------------------------------------------
//p " 
//The reason for organizing the object languages as a sequence of
//extended languages is that it gives 
//" ;

//p "
//This also gives participants some freedom in choosing the tasks they
//implement and the complexity of the language for which they are
//implemented.
//" ;

//This is not so much a specified task as a means of organizing and
//implementing languages such as L4 as extension of L3.

//This is not a task but a means of organizing the object languages to
//demonstrate modular and extensible design and implementation of
//languages.



h2 "Participant defined contributions";

p "
Participants are encouraged to go beyond this problem set and include
additional language features, processing tasks, or other components
that specifically highlight interesting or special aspects of their
tools and techniques.
" ;

p "
For example, task 1 may be extended so that comments and layout are
maintained in the pretty-printing of the input program or a second
concrete syntax may be developed that has a more modern look-and-feel,
perhaps something more akin to C, Java, or Haskell.  Participants may
also consider developing some sort of integrated development
environment support for the languages.  In keeping with the goal of
tool generation, this support should be generated from the (possibly
annotated) language specification.
" ;

p "
The goal of these contributions should be to highlight special
capabilities of the tool that may not be as visible on the predefined
tasks.  
" ;

h2 "Community Building";

p {
echo "
The community building envisioned by this Tool Challenge does not need
to wait until the workshop begins.  A Google-group has been set up
to support discussion of the challenge problems and to encourage the
sharing of test programs.  If you have questions about the challenge
or about specific problems please ask them there.  The web page for
this group is: " ;

a(href="http://groups.google.com/group/ldta-2011-tool-challenge")
       "http://groups.google.com/group/ldta-2011-tool-challenge" ;
echo "." ;
} 


h2 "Submission of abstracts and intention to participate" ;

p"
The Tool Challenge is open to developers of all kinds of grammarware
tools and techniques.  To participate, tool developers must submit the
following by March 5, 2011: Names of participants and the name of
their tool or technique.  Presentation title and abstract.  The short
abstract should specify on what aspects of the problem set the tool
was applied, where it excelled and where no solution was offered
and/or the solution was considered less than optimal.  We expect these
to be only a few paragraphs in length.
" ;

p "
This information is used for scheduling purposes and is not used for
evaluation; as all tool developers interested in participating are
welcome and will be given an opportunity to present their solution at
the workshop.  Submission of this information indicates a commitment
to attend LDTA and to participate in the workshop.  This information
will be listed in the program.
" ;

p "
Authors of submissions that appear to be outside of the scope of LDTA
will be contacted to discuss the relevance of their work to the
workshop.  Tool developers who question whether their work falls with
the scope of LDTA are encouraged to contact the PC chairs early on for
clarification.
" ;

h2 "Joint Tool Challenge Paper" ;

p "
After the workshop a joint paper will be written by participants and
submitted to a journal, most likely Science of Computer Programming.
It is separate from the proceedings of the workshop and any special
journal issue for the workshop.
" ;

h2 "LDTA Rubric";

p "
In preparing the presentation of one's solution for the workshop,
participants are strongly encouraged to provide an analysis of their
solutions based on the following criteria.  The intent is to find
common language for discussing the quality of the various solutions.
" ;

ul {
li "
ease of specification: Are the specifications declarative and at an
   appropriately high level of abstraction?
" ;

li "
analysis of specifications: Does the tool perform any domain specific
   analysis over the specifications to detect errors or improve
   performance?
" ;

li "
performance: Does the tool process the specifications in a reasonable
   amount of time and space?  Does the generated language processing
   tool (e.g. a generated parser or code implementing an attribute
   grammar) run efficiently in time and space?
" ;

li "
flexibility, extensibility: How easy is it to modify and extend the
   language specification?
" ;

li "
modularity: Code reuse is critical in mainstream applications and
   languages - to what degree does the tool or technique support this
   in the evolving set of languages?
" ;

li "
quality of error messages: Do errors in the language specification
   result in error messages that are understandable and informative?
   Do errors in programs processed by generated tools result in good
   error messages (to the extent that the generating tools have some
   effect on this)?
" ;

li "
ease of use:  Overall, is the tool easy to use?
";
}

}
end  
// Tools


def parTitle(title)
 h1.title title;
end

def par 
 div.entry {
  yield;
 }
end

def section(title) 
  parTitle(title);
  par yield;
end

def subtitle(title)
  p.meta small title;
end

def main 
html(xmlns='http://www.w3.org/1999/xhtml) {
 
    head {
     title "LDTA";
     meta(http-equiv="content-type", content="text/html; charset=utf-8");
     meta(name="keywords", content="Programming Debugging Language Descriptions Parsing Parsers Term Rewriting Attribute Grammars Functional Programming Debugging Model Driven Engineering Formal Methods Meta Programming");
     meta(name="description", content="The International Workshop on Language Descriptions Tools and Applications");
     meta(name="language", content="NL");
     css("./style.css", "screen");
     comment "Design by Free CSS Templates\nhttp://www.freecsstemplates.org\nReleased for free under a Creative Commons Attribution 2.5 License\n\nName       : Compressed \nDescription: A three-column, fixed-width template fit for 1024x768 screen resolutions.\nVersion    : 1.0\nReleased   : 20080524";
    }

    body {
      div#logo h1.logo "Workshop on Language Descriptions, Tools, and Applications";
      div#page {
        div.sidebar#sidebar1 {
         br; 
         previous;
        }

      div#content div.bgtop div.bgbtm div.post content();

    div.sidebar#sidebar2 {
      br;
      relatedLinks;
    }
   }
    div(style="clear: both;") {
      br;
      div#footer p.legal "&copy;2007 All Rights Reserved. 
      Design by <a(href="http://www.freecsstemplates.org/") "Free CSS Templates">";
    }
  }
  }
end
